name: Deploy to AWS ECR

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: radiant-cloud

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set image tag
      id: image-tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # For tags, use the tag name
          echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/heads/main ]] || [[ $GITHUB_REF == refs/heads/master ]]; then
          # For main/master branch, use 'latest'
          echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
        else
          # For other branches, use branch name with commit SHA
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.image-tag.outputs.IMAGE_TAG }}
      run: |
        echo "Building and pushing image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        ./gradlew generateJava && ./gradlew :radiant-app:jib \
          -Djib.to.image=$ECR_REGISTRY/$ECR_REPOSITORY \
          -Djib.to.tags=$IMAGE_TAG \
          -Djib.container.environment=SPRING_PROFILES_ACTIVE=prod

    - name: Update deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Successfully deployed ${{ steps.image-tag.outputs.IMAGE_TAG }} to ECR"
          echo "Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.IMAGE_TAG }}"
        else
          echo "❌ Deployment failed"
        fi

    - name: Image vulnerability scan
      if: success()
      continue-on-error: true
      run: |
        aws ecr start-image-scan \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=${{ steps.image-tag.outputs.IMAGE_TAG }} \
          --region ${{ env.AWS_REGION }} || true
